function ConvertTo-CompositeResource {
    [CmdletBinding(DefaultParameterSetName = 'ByConfiguration')]
    param
    (
        [Parameter(Mandatory = $true)]
        [string]
        $ConfigurationName,

        [Parameter()]
        [string]
        $ResourceName = $ConfigurationName,

        [Parameter()]
        [string]
        $ModuleName = "$($ConfigurationName)DSC",

        [Parameter(Mandatory = $true)]
        [version]
        $ModuleVersion = '1.0.0',

        [Parameter()]
        [string]
        $Author = 'function',

        [Parameter()]
        [string]
        $Description = 'Automatically generated by the Composite Resource module.  http://github.com/microsoft/compositeresource',

        [Parameter()]
        [string]
        $OutputPath = '.\'
    )

    $configuration = Get-Command -Name $ConfigurationName -CommandType 'Configuration' -ErrorAction SilentlyContinue
    if (-not $configuration) {
        throw ('Could not find a configuration ''{0}'' loaded in the session.' -f $ConfigurationName)
    }

    $moduleFolder = Join-Path -Path $OutputPath -ChildPath $ModuleName
    $versionFolder = Join-Path -Path $moduleFolder -ChildPath $ModuleVersion.ToString()
    $dscResourcesFolder = Join-Path -Path $versionFolder -ChildPath 'DSCResources'
    $configurationFolder = Join-Path -Path $dscResourcesFolder -ChildPath $ResourceName

    # Creates the folder structure if any folder does not exist.
    if (-not (Resolve-Path -Path $configurationFolder -ErrorAction 'SilentlyContinue')) {
        New-Item -Path $configurationFolder -ItemType Directory -Force -ErrorAction Stop | Out-Null
    }

    $resourcePsm1 = Join-Path -Path $configurationFolder -ChildPath "$ResourceName.schema.psm1"
    $resourcePsd1 = Join-Path -Path $configurationFolder -ChildPath "$ResourceName.psd1"
    $modulePsd1 = Join-Path -Path $versionFolder -ChildPath "$ModuleName.psd1"

    Set-Content -Path $resourcePsm1 -Value @"
Configuration $ResourceName
{
$($configuration.Definition)
}
"@

    $resourceNames = @()

    # If we already got a module manifest, then pick up any existing resource names.
    if (Test-Path -Path $modulePsd1) {
        $moduleManifest = Import-PowerShellDataFile -Path $modulePsd1
        $resourceNames = @($moduleManifest.DscResourcesToExport)
    }

    if ($resourceNames -notcontains $ResourceName) {
        $resourceNames += $ResourceName
    }

    New-ModuleManifest -Path $modulePsd1 `
        -Guid (New-Guid).Guid `
        -Author $Author `
        -Description $Description `
        -ModuleVersion $ModuleVersion `
        -DscResourcesToExport $resourceNames

    New-ModuleManifest -Path $resourcePsd1 `
        -RootModule "$ResourceName.schema.psm1" `
        -Guid (New-Guid).Guid
}


$request = Get-Content $req -Raw | ConvertFrom-Json

if ($req_query_config) {
    $config = $req_query_config
}
else {
    $config = $request.config
}

if ($req_query_name) {
    $name = $req_query_name
}
else {
    $name = $request.name
}

$config = @"
Configuration $name
{
$($config)
}
"@

$guid = new-guid | % guid
mkdir "$env:temp\$guid\"
ConvertTo-CompositeResource -configuration $config -out "$env:temp\$guid\"
$out = ls "$env:temp\$guid\"

$response = @{
    Config = $out
} | ConvertTo-Json
 
Out-File -InputObject $response -FilePath $res -Encoding Ascii